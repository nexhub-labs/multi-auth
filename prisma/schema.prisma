// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MULTI_AUTH_DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid()) @map("_id")
  email               String?              @unique
  password            String?
  name                String?
  socialAuths         SocialAuth[]
  sessions            Session[]
  verificationTokens  VerificationToken[]
  passwordResetTokens PasswordResetToken[]

  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model SocialAuth {
  id         String   @id @default(cuid()) @map("_id")
  provider   String
  providerId String
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Ensure a user cannot register the same social account twice.
  @@unique([provider, providerId])
}

model Session {
  id         String   @id @default(cuid()) @map("_id")
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  token      String   @unique
  ipAddress  String? // Optional: store the user's IP address.
  userAgent  String? // Optional: store the user agent string.
  createdAt  DateTime @default(now())
  expiresAt  DateTime // Expiration date for the session.
  lastAccess DateTime @default(now())
  // Note: Create a TTL index on `expiresAt` directly in MongoDB to auto-remove expired sessions.

  @@index([userId])
  @@index([expiresAt])
}

model VerificationToken {
  id        String   @id @default(cuid()) @map("_id")
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Note: Set up a TTL index on `expiresAt` manually in MongoDB to automatically clear expired verification tokens.

  @@index([userId])
  @@index([expiresAt])
}

model PasswordResetToken {
  id        String   @id @default(cuid()) @map("_id")
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Note: Similarly, create a TTL index on `expiresAt` in MongoDB for automatic cleanup.

  @@index([userId])
  @@index([expiresAt])
}
